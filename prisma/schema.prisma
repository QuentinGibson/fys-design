datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique
  role  String @default("USER")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Testimonial {
  id         String   @id @default(cuid())
  name       String   @unique
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model HomeTestimonial {
  id         String   @id @default(cuid())
  name       String   @unique
  image      String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Project {
  id         String   @id @default(cuid())
  name       String   @unique
  image      String
  link       String?
  slug       String   @unique
  summary    String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  services   Type[]
  industries Industry[]
}

model Industry {
  id         String    @id @default(cuid())
  name       String    @unique
  project    Project[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
}

model Type {
  id         String    @id @default(cuid())
  name       String    @unique
  project    Project[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
}

model Case {
  id         String   @id @default(cuid())
  logo       String
  image      String
  slug       String   @unique
  name       String   @unique
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  tags       Tag[]
}

model Tag {
  id         String   @id @default(cuid())
  name       String   @unique
  case       Case?    @relation(fields: [caseId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  caseId     String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Service {
  id          String   @id @default(cuid())
  image       String
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  perks       Perk[]
  submissions ContactFormSubmission[]
}

model Perk {
  id         String   @id @default(cuid())
  name       String   @unique
  service    Service? @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  serviceId  String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model ContactFormSubmission {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  message   String
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  serviceId String?
}
